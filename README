Willkommen zum nächsten Teil des Tutorials.

Diesmal wollen wir uns eine zentrale Startseite für unsere WebAnwendung bauen, von der aus
wir zu unserer Teams- und später auch Spielerseite navigieren können und die eben jedem 
Benutzer als ersten angezeigt wird, wenn er unsere Anwendung aufruft.

Diese Seite bekommt den Namen "index.jsp", die wurde bei der Erstellung der Anwendung 
bereits automatisch von Eclipse erstellt.
























Okay, in diesem Video räumen wir noch etwas im JSP File "teams.jsp" auf. Genauer gesagt soll noch etwas
Java-Code rausfliegen.

Hier wollen wir die for(Team team : teams) Schleife loswerden.

Dazu verwenden wir JSTL und EL -> kurze Erklärung dazu.

Genug der warmen Worte.

Wir müssen jetzt nur noch das JSP File anfassen.

Damit ist der Zugriff auf das Team-Object doch recht einfach und sprechend geworden. 
Wer es gleich mal selbst versuchen möchte, kann ja mal eine Liste der Spieler auf diese Art und Weise
erzeugen.

Bei Fragen einfach melden.

Vielen Dank für's Anschauen.



































































Willkommen zum 3. Teil der Fussball-Studienarbeit Serie :-D

Bisher haben wir uns eine Klasse gebaut, die das XML File "teams.xml" parsen und dann
die Daten in die Datenbank schreiben könnte. Die Verbidnung haben wir mit JDBC quasi
händisch geöffnet.

Zum Anzeigen der Vereine haben wir eine Servlet-only WebAnwendung gebaut, hier war es
so, dass das TeamServlet sowohl die Präsentation als auch die Datenschicht / bzw.
den Controller darstellte.

Dies wollen wir nun ändern, ein JSP File namens teams.jsp soll die Präsentation (HTML)
übernehmen, das Servlet stellt nur noch die Verbindung zwischen Daten und View dar.

Damit ist das Servlet fertig. Würden wir nun /teams im Browser aufrufen, käme noch eine 
Exception, da es die Datei teams.xml noch nicht gibt. Diese erstellen wir uns durch 
Rechtsklick auf WebContent und dann New JSP File.

Testen.

Funktioniert. Im nächsten Teil entfernen wir dann noch etwas Java-Code aus dem JSP File, 
denn im Moment muss der Bearbeiter des JSP Files neben HTML auch noch eine gute Portion
Wissen über Java mitbringen.

 






























Willkommen zum zweiten Teil.

Diesmal möchte ich ein Servlet bauen, das die Teams und Spieler aus der Datenbank holt und
im Browser darstellt. Anschließend trennen wir das noch auf und lassen die JSP Datei
den HTML Kram erledigen und das Servlet macht die Java-Seite, das ist aus meiner Sicht am 
Sinnvollsten, denn im Servlet haben wir keine HTML Syntax-Prüfung und tun uns eh schwer die
ganzen HTML Sachen zu schreiben.

Okay, genug geredet, los geht's... Achja, den Ton lass ich erstmal weg, die Qualität beim letzten Mal
war schrecklich.

So, damit wir dann gleich vernünftig arbeiten können, erstellen wir uns gleich eine Klasse
Team und eine Player.
Hier handelt es sich um Datenmodell-Klassen, daher kommen die in ein passendes Paket .model


Damit ist das Servlet nun auch startklar und wir können es mal auf unseren ApplicationServer deployen.
Für das Tutorial verwende ich den Glassfish v3 Open Source Edition..

Schnipp..
Nachdem mein Netbook nun den Glassfish endlich gestartet hat, hier das Ergebnis:

Okay, das Servlet funktioniert nun also, eine kleine Änderung innerhalb der DbOpenHandler Klasse noch.

Den Code lade ich bei GitHub in das Repository "FussballStudienarbeit", es kann dort per Git oder als
zip Datei heruntergeladen werden.

Im nächsten Video trennen wir dann den HTML Code aus dem Servlet raus und lassen eine JSP Datei 
den Teil übernehmen.